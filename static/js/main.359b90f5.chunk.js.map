{"version":3,"sources":["components/Item.js","components/Category.js","App.js","serviceWorker.js","index.js"],"names":["Item","itemData","className","name","description","price","style","display","src","img","alt","highlighted","Category","category","filteredItems","items","filter","item","map","i","key","margin","padding","App","useState","menuItems","setMenuItems","categories","setCategories","selectedCat","setSelectedCat","useEffect","itemCategories","Set","handleClick","cat","console","log","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"utGAmBeA,EAjBF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACZ,OACI,wBAAIC,UAAU,aACV,yBAAKA,UAAU,aACP,4BAAKD,EAASE,MACd,2BAAIF,EAASG,aACb,qCAAWH,EAASI,MAApB,SAER,yBAAKH,UAAU,aAAaI,MAAO,CAACC,QAAS,SACzC,yBAAKL,UAAU,aAAaM,IAAKP,EAASQ,IAAKC,IAAKT,EAASE,OAC7D,yBAAKD,UAAU,aAAaI,MAAO,CAAEC,QAASN,EAASU,YAAc,KAAO,SAA5E,kBCWDC,EApBE,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAIVC,EAJgC,EAAZC,MAKDC,QAAO,SAAAC,GAAS,OAAOA,EAAKJ,WAAaA,KACzCK,KAAI,SAACjB,EAAUkB,GAAX,OACL,kBAAC,EAAD,CAAMlB,SAAUA,EAAUmB,IAAKD,OACvD,OACI,yBAAKjB,UAAU,YACX,4BAAKW,GACL,wBAAIP,MAAO,CAACe,OAAQ,EAAGC,QAAS,IAC3BR,GAEL,qCCgCGS,MA5Cf,WAAe,MAGqBC,mBAAS,IAH9B,mBAGNC,EAHM,KAGKC,EAHL,OAMuBF,mBAAS,CAAC,KANjC,mBAMNG,EANM,KAMMC,EANN,OASyBJ,mBAAS,OATlC,mBASNK,EATM,KASOC,EATP,KAYbC,qBAAU,WACJL,EAAaX,KACb,IAAMiB,EAAiBjB,IAAMG,KAAI,SAAAD,GAAI,OAAIA,EAAKJ,YAC9Ce,EAAc,YAAI,IAAIK,IAAID,OAC7B,IAGD,IAAME,EAAc,SAACC,GACnBL,EAAeK,GACfC,QAAQC,IAAIF,IAGhB,OACE,yBAAKjC,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,SAAd,eACA,yBAAKA,UAAU,kBACb,0CACA,4BAAQoC,QAAU,kBAAMJ,EAAY,SAApC,OACCP,EAAWT,KAAI,SAACiB,EAAKhB,GAAN,OAAY,4BAAQC,IAAKD,EAAGmB,QAAU,kBAAMJ,EAAYC,KAAQA,EAApD,UAGb,QAAhBN,EACG,kBAAC,EAAD,CAAUd,MAAOU,EAAWZ,SAAUgB,IACtCF,EAAWT,KAAI,SAACiB,EAAKhB,GAAN,OAAY,kBAAC,EAAD,CAAUC,IAAKD,EAAGJ,MAAOU,EAAWZ,SAAUsB,SC7BjEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.359b90f5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Item = ({ itemData }) => {\r\n    return(\r\n        <li className=\"menu-item\">\r\n            <div className=\"item-data\">\r\n                    <h2>{itemData.name}</h2>\r\n                    <p>{itemData.description}</p>\r\n                    <p>Price: {itemData.price} Eur</p>\r\n            </div>\r\n            <div className=\"item-image\" style={{display: 'none'}}>\r\n                <img className=\"item-image\" src={itemData.img} alt={itemData.name}></img>\r\n                <div className=\"highligted\" style={{ display: itemData.highlighted ? null : 'none'}}>Highlighted</div>\r\n            </div>\r\n        </li>\r\n\r\n    )\r\n}\r\n\r\nexport default Item","import React from 'react'\r\nimport Item from './Item'\r\n\r\nconst Category = ({ category, items }) => {\r\n\r\n    // Receive category and items and filter items that match the category received as prop\r\n    // Map items by rendering Item components:\r\n    const filteredItems = items\r\n                            .filter(item => {return item.category === category})\r\n                            .map((itemData, i) =>\r\n                            <Item itemData={itemData} key={i} />)\r\n    return (\r\n        <div className=\"Category\">\r\n            <h1>{category}</h1> \r\n            <ul style={{margin: 0, padding: 0}}>\r\n                {filteredItems}\r\n            </ul>\r\n            <h1>---</h1>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Category","import React, { useState, useEffect } from 'react'\r\nimport './App.css'\r\nimport { items } from './db.json'\r\nimport Category from './components/Category'\r\n\r\nfunction App() {\r\n\r\n  // State: Menu items:\r\n  const [menuItems, setMenuItems] = useState([])\r\n\r\n  // State: Categories available: \r\n  const [categories, setCategories] = useState([\"\"])\r\n\r\n  // State: Selected category:\r\n  const [selectedCat, setSelectedCat] = useState(\"All\")\r\n\r\n  // Set initial notes and categories from fetched data:\r\n  useEffect(() => {\r\n        setMenuItems(items)\r\n        const itemCategories = items.map(item => item.category)\r\n        setCategories([...new Set(itemCategories)])\r\n  }, [])\r\n\r\n  // When user clicks category button it changes the selectedCat state\r\n    const handleClick = (cat) => {\r\n      setSelectedCat(cat)\r\n      console.log(cat)\r\n    }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1 className=\"title\">Speisekarte</h1> \r\n        <div className=\"categories-box\">\r\n          <p>Categories:</p>\r\n          <button onClick={ () => handleClick(\"All\") }>All</button>\r\n          {categories.map((cat, i) => <button key={i} onClick={ () => handleClick(cat) }>{cat} </button>)}\r\n        </div>\r\n        </header>\r\n        {selectedCat !== \"All\" \r\n          ? <Category items={menuItems} category={selectedCat}/> \r\n          : categories.map((cat, i) => <Category key={i} items={menuItems} category={cat}/> )\r\n        }\r\n\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}